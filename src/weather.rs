use reqwest::Client;
use serde::Deserialize;
use chrono::{Utc, TimeZone, Timelike, Datelike};
use log::error;
use std::collections::HashMap;

const OPENWEATHER_URL: &str = "https://api.openweathermap.org/data/2.5/weather";
const FORECAST_URL: &str = "https://api.openweathermap.org/data/2.5/forecast";

#[derive(Debug, Deserialize)]
struct OpenWeatherResponse {
    main: MainInfo,
    weather: Vec<WeatherInfo>,
    wind: WindInfo,
    clouds: CloudsInfo,
    sys: SysInfo,
    visibility: Option<i32>,
}

#[derive(Debug, Deserialize)]
struct MainInfo {
    temp: f32,
    feels_like: f32,
    humidity: f32,
    temp_min: f32,
    temp_max: f32,
}

#[derive(Debug, Deserialize)]
struct WeatherInfo {
    description: String,
    icon: String,
    main: String,
}

#[derive(Debug, Deserialize)]
struct WindInfo {
    speed: f32,
    deg: f32,
}

#[derive(Debug, Deserialize)]
struct CloudsInfo {
    all: i32,
}

#[derive(Debug, Deserialize)]
struct SysInfo {
    sunrise: i64,
    sunset: i64,
}

#[derive(Debug, Deserialize)]
struct ForecastResponse {
    list: Vec<ForecastItem>,
}

#[derive(Debug, Deserialize)]
struct ForecastItem {
    dt: i64,
    main: MainInfo,
    weather: Vec<WeatherInfo>,
    dt_txt: String,
}

#[derive(Clone)]
pub struct WeatherClient {
    client: Client,
    api_key: String,
}

impl WeatherClient {
    pub fn new(api_key: String) -> Self {
        Self {
            client: Client::new(),
            api_key,
        }
    }

    pub async fn get_weather(&self, city: &str) -> Result<String, String> {
        let current_weather = self.fetch_current_weather(city).await?;
        let forecast = self.fetch_forecast(city).await;
        
        Ok(self.format_weather(&current_weather, forecast.ok()))
    }

    async fn fetch_current_weather(&self, city: &str) -> Result<OpenWeatherResponse, String> {
        let response = match self.client
            .get(OPENWEATHER_URL)
            .query(&[
                ("q", city),
                ("appid", &self.api_key),
                ("units", "metric"),
                ("lang", "ru"),
            ])
            .send()
            .await
        {
            Ok(resp) => resp,
            Err(e) => {
                error!("–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã: {}", e);
                return Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: {}", e));
            }
        };

        if !response.status().is_success() {
            let status = response.status();
            let error_text = match response.text().await {
                Ok(text) => text,
                Err(_) => "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞".to_string(),
            };
            
            error!("–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {} - {}", status, error_text);
            return Err(format!("–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({}). –í–æ–∑–º–æ–∂–Ω–æ, —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥.", status));
        }

        match response.json::<OpenWeatherResponse>().await {
            Ok(weather_data) => Ok(weather_data),
            Err(e) => {
                error!("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–≥–æ–¥—ã: {}", e);
                Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: {}", e))
            }
        }
    }

    async fn fetch_forecast(&self, city: &str) -> Result<ForecastResponse, String> {
        let response = match self.client
            .get(FORECAST_URL)
            .query(&[
                ("q", city),
                ("appid", &self.api_key),
                ("units", "metric"),
                ("lang", "ru"),
                ("cnt", "24"), // –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞ (—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 3 —á–∞—Å–∞)
            ])
            .send()
            .await
        {
            Ok(resp) => resp,
            Err(e) => {
                error!("–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {}", e);
                return Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ: {}", e));
            }
        };

        if !response.status().is_success() {
            let status = response.status();
            let error_text = match response.text().await {
                Ok(text) => text,
                Err(_) => "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞".to_string(),
            };
            
            error!("–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {} - {}", status, error_text);
            return Err(format!("–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({})", status));
        }

        match response.json::<ForecastResponse>().await {
            Ok(forecast_data) => Ok(forecast_data),
            Err(e) => {
                error!("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {}", e);
                Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ: {}", e))
            }
        }
    }

    pub async fn get_weekly_forecast(&self, city: &str) -> Result<String, String> {
        let forecast = self.fetch_forecast_extended(city).await?;
        Ok(self.format_weekly_forecast(&forecast))
    }

    async fn fetch_forecast_extended(&self, city: &str) -> Result<ForecastResponse, String> {
        let response = match self.client
            .get(FORECAST_URL)
            .query(&[
                ("q", city),
                ("appid", &self.api_key),
                ("units", "metric"),
                ("lang", "ru"),
                ("cnt", "40"), // –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π —Å 3-—á–∞—Å–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–º–∞–∫—Å–∏–º—É–º 40)
            ])
            .send()
            .await
        {
            Ok(resp) => resp,
            Err(e) => {
                error!("–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {}", e);
                return Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ: {}", e));
            }
        };

        if !response.status().is_success() {
            let status = response.status();
            let error_text = match response.text().await {
                Ok(text) => text,
                Err(_) => "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞".to_string(),
            };
            
            error!("–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {} - {}", status, error_text);
            return Err(format!("–°–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({})", status));
        }

        match response.json::<ForecastResponse>().await {
            Ok(forecast_data) => Ok(forecast_data),
            Err(e) => {
                error!("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {}", e);
                Err(format!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥–Ω–æ–∑–µ: {}", e))
            }
        }
    }

    fn format_weather(&self, data: &OpenWeatherResponse, forecast: Option<ForecastResponse>) -> String {
        // –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
        let weather_emoji = self.get_weather_emoji(&data.weather[0].icon);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
        let wind_direction = self.get_wind_direction(data.wind.deg);
        
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤–æ—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–∞—Ç–∞ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        let sunrise = Utc.timestamp_opt(data.sys.sunrise, 0).unwrap();
        let sunset = Utc.timestamp_opt(data.sys.sunset, 0).unwrap();
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        let sunrise_time = format!("{:02}:{:02}", sunrise.hour(), sunrise.minute());
        let sunset_time = format!("{:02}:{:02}", sunset.hour(), sunset.minute());
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ
        let clothing_recommendation = self.get_clothing_recommendation(data.main.temp, data.weather[0].main.as_str());
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
        let temp_by_time = if let Some(forecast_data) = forecast {
            self.extract_temperatures_by_time(&forecast_data)
        } else {
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö".to_string()
        };
        
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, 
        // —á—Ç–æ–±—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–æ—á–∫–∏ –≤ –Ω–∏—Ö –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ —Å—Ç—Ä–æ–∫—É
        let temp = format!("{:.1}", data.main.temp).replace(".", "\\.");
        let feels_like = format!("{:.1}", data.main.feels_like).replace(".", "\\.");
        let temp_min = format!("{:.1}", data.main.temp_min).replace(".", "\\.");
        let temp_max = format!("{:.1}", data.main.temp_max).replace(".", "\\.");
        let wind_speed = format!("{:.1}", data.wind.speed).replace(".", "\\.");
        let visibility = format!("{}", data.visibility.unwrap_or(0) / 1000);
        
        format!(
            "{} {}\n\n\
            üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {}¬∞C)\n\
            {} \n\
            üî∏ –ú–∏–Ω: {}¬∞C, –ú–∞–∫—Å: {}¬∞C\n\
            üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {}%\n\
            üçÉ –í–µ—Ç–µ—Ä: {} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {}\n\
            ‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {}%\n\
            üëÅ –í–∏–¥–∏–º–æ—Å—Ç—å: {} –∫–º\n\
            üåÖ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {}\n\
            üåá –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {}\n\n\
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {}",
            weather_emoji,
            self.capitalize_first_letter(&data.weather[0].description),
            temp,
            feels_like,
            temp_by_time,
            temp_min,
            temp_max,
            data.main.humidity,
            wind_speed,
            wind_direction,
            data.clouds.all,
            visibility,
            sunrise_time,
            sunset_time,
            clothing_recommendation
        )
    }
    
    fn extract_temperatures_by_time(&self, forecast: &ForecastResponse) -> String {
        if forecast.list.is_empty() {
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥–Ω–æ–∑–µ".to_string();
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ç—Ä–æ (6-11), –¥–µ–Ω—å (12-17), –≤–µ—á–µ—Ä (18-23)
        let mut morning_temp: Option<f32> = None;
        let mut day_temp: Option<f32> = None;
        let mut evening_temp: Option<f32> = None;

        for item in &forecast.list {
            let time = Utc.timestamp_opt(item.dt, 0).unwrap();
            let hour = time.hour();

            if (6..12).contains(&hour) && morning_temp.is_none() {
                morning_temp = Some(item.main.temp);
            } else if (12..18).contains(&hour) && day_temp.is_none() {
                day_temp = Some(item.main.temp);
            } else if (18..24).contains(&hour) && evening_temp.is_none() {
                evening_temp = Some(item.main.temp);
            }

            // –ï—Å–ª–∏ —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            if morning_temp.is_some() && day_temp.is_some() && evening_temp.is_some() {
                break;
            }
        }

        format!(
            "üïí –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –£—Ç—Ä–æ: {}, –î–µ–Ω—å: {}, –í–µ—á–µ—Ä: {}",
            morning_temp.map_or("–ù/–î".to_string(), |t| format!("{:.1}¬∞C", t).replace(".", "\\.")),
            day_temp.map_or("–ù/–î".to_string(), |t| format!("{:.1}¬∞C", t).replace(".", "\\.")),
            evening_temp.map_or("–ù/–î".to_string(), |t| format!("{:.1}¬∞C", t).replace(".", "\\."))
        )
    }
    
    fn get_weather_emoji(&self, icon: &str) -> &'static str {
        match icon {
            "01d" => "‚òÄÔ∏è",  // —è—Å–Ω–æ (–¥–µ–Ω—å)
            "01n" => "üåô",  // —è—Å–Ω–æ (–Ω–æ—á—å)
            "02d" => "üå§Ô∏è", // –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ (–¥–µ–Ω—å)
            "02n" => "üåô‚òÅÔ∏è", // –º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ (–Ω–æ—á—å)
            "03d" | "03n" => "‚òÅÔ∏è", // –æ–±–ª–∞—á–Ω–æ
            "04d" | "04n" => "‚òÅÔ∏è‚òÅÔ∏è", // –ø–∞—Å–º—É—Ä–Ω–æ
            "09d" | "09n" => "üåßÔ∏è", // –¥–æ–∂–¥—å
            "10d" => "üå¶Ô∏è", // –¥–æ–∂–¥—å —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ (–¥–µ–Ω—å)
            "10n" => "üåßÔ∏èüåô", // –¥–æ–∂–¥—å —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ (–Ω–æ—á—å)
            "11d" | "11n" => "‚õàÔ∏è", // –≥—Ä–æ–∑–∞
            "13d" | "13n" => "‚ùÑÔ∏è", // —Å–Ω–µ–≥
            "50d" | "50n" => "üå´Ô∏è", // —Ç—É–º–∞–Ω
            _ => "üå°Ô∏è",
        }
    }
    
    fn get_wind_direction(&self, degrees: f32) -> &'static str {
        let directions = [
            "—Å–µ–≤–µ—Ä–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π", "–≤–æ—Å—Ç–æ—á–Ω—ã–π", "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π",
            "—é–∂–Ω—ã–π", "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π", "–∑–∞–ø–∞–¥–Ω—ã–π", "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
        ];
        
        let index = ((degrees + 22.5) % 360.0 / 45.0) as usize;
        directions[index]
    }
    
    fn get_clothing_recommendation(&self, temp: f32, weather_main: &str) -> String {
        // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è MarkdownV2
        let temp_str = format!("{:.1}", temp).replace(".", "\\.");
        
        if temp < -25.0 {
            format!("ü•∂ –ö—Ä–∞–π–Ω–µ —Ö–æ–ª–æ–¥–Ω–æ! {}¬∞C! –ù—É–∂–Ω–∞ –æ—á–µ–Ω—å —Ç–µ–ø–ª–∞—è –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –æ–¥–µ–∂–¥–∞: —Ç–µ—Ä–º–æ–±–µ–ª—å–µ, —Ç–µ–ø–ª—ã–π —Å–≤–∏—Ç–µ—Ä, –∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞/–ø—É—Ö–æ–≤–∏–∫, —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±—Ä—é–∫–∏, —Ç–µ–ø–ª–∞—è —à–∞–ø–∫–∞, —à–∞—Ä—Ñ, –≤–∞—Ä–µ–∂–∫–∏/–ø–µ—Ä—á–∞—Ç–∫–∏ –∏ –∑–∏–º–Ω—è—è –æ–±—É–≤—å —Å —Ç—ë–ø–ª—ã–º–∏ –Ω–æ—Å–∫–∞–º–∏.", temp_str)
        } else if temp < -15.0 {
            format!("‚ùÑÔ∏è –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! {}¬∞C! –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∑–∏–º–Ω—é—é –∫—É—Ä—Ç–∫—É/–ø—É—Ö–æ–≤–∏–∫, —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±—Ä—é–∫–∏, –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—É—é –æ–¥–µ–∂–¥—É (—Ç–µ—Ä–º–æ–±–µ–ª—å–µ, —Å–≤–∏—Ç–µ—Ä), —Ç–µ–ø–ª—É—é —à–∞–ø–∫—É, —à–∞—Ä—Ñ, –ø–µ—Ä—á–∞—Ç–∫–∏ –∏ –∑–∏–º–Ω—é—é –æ–±—É–≤—å. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Ç–µ–ø–ª—ã–µ –Ω–æ—Å–∫–∏.", temp_str)
        } else if temp < -5.0 {
            format!("üß£ –•–æ–ª–æ–¥–Ω–æ. {}¬∞C. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∑–∏–º–Ω—è—è –∫—É—Ä—Ç–∫–∞, —Ç–µ–ø–ª—ã–π —Å–≤–∏—Ç–µ—Ä, —à–∞–ø–∫–∞, –ø–µ—Ä—á–∞—Ç–∫–∏ –∏ —à–∞—Ä—Ñ. –õ—É—á—à–µ –Ω–∞–¥–µ—Ç—å —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±—Ä—é–∫–∏ –∏ –∑–∏–º–Ω—é—é –æ–±—É–≤—å. –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ–ª–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ, –ø–æ–¥—É–º–∞–π—Ç–µ –æ —Ç–µ—Ä–º–æ–±–µ–ª—å–µ.", temp_str)
        } else if temp < 5.0 {
            if weather_main == "Rain" || weather_main == "Drizzle" {
                format!("üåßÔ∏è –•–æ–ª–æ–¥–Ω–æ –∏ –¥–æ–∂–¥–ª–∏–≤–æ. {}¬∞C. –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—É—é –∫—É—Ä—Ç–∫—É, —à–∞–ø–∫—É, –ø–µ—Ä—á–∞—Ç–∫–∏, —à–∞—Ä—Ñ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç –∏–ª–∏ –Ω–∞–¥–µ–Ω—å—Ç–µ –∫—É—Ä—Ç–∫—É —Å –∫–∞–ø—é—à–æ–Ω–æ–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–∞—è –æ–±—É–≤—å.", temp_str)
            } else if weather_main == "Snow" {
                format!("üå®Ô∏è –•–æ–ª–æ–¥–Ω–æ –∏ —Å–Ω–µ–∂–Ω–æ. {}¬∞C. –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∑–∏–º–Ω—é—é –∫—É—Ä—Ç–∫—É, —à–∞–ø–∫—É, –ø–µ—Ä—á–∞—Ç–∫–∏, —à–∞—Ä—Ñ –∏ –∑–∏–º–Ω—é—é –æ–±—É–≤—å —Å —Ö–æ—Ä–æ—à–∏–º –ø—Ä–æ—Ç–µ–∫—Ç–æ—Ä–æ–º. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è —É—Ç–µ–ø–ª–µ–Ω–Ω—ã–µ –±—Ä—é–∫–∏.", temp_str)
            } else {
                format!("üß• –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. {}¬∞C. –ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ç–µ–ø–ª–∞—è –∫—É—Ä—Ç–∫–∞, —Å–≤–∏—Ç–µ—Ä –∏–ª–∏ —Ç–æ–ª—Å—Ç–æ–≤–∫–∞, —à–∞–ø–∫–∞ –∏ –ø–µ—Ä—á–∞—Ç–∫–∏. –ü–æ–¥–æ–π–¥–µ—Ç –ª–µ–≥–∫–∞—è —à–∞–ø–∫–∞ –∏ —à–∞—Ä—Ñ, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –≤–µ—Ç—Ä–µ.", temp_str)
            }
        } else if temp < 10.0 {
            if weather_main == "Rain" || weather_main == "Drizzle" {
                format!("üåÇ –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ –∏ –¥–æ–∂–¥–ª–∏–≤–æ. {}¬∞C. –í–æ–∑—å–º–∏—Ç–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ –ø–ª–∞—â, –∑–æ–Ω—Ç –∏ –Ω–∞–¥–µ–Ω—å—Ç–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—É—é –æ–±—É–≤—å. –°–≤–∏—Ç–µ—Ä –∏–ª–∏ —Ç–æ–ª—Å—Ç–æ–≤–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞—é—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–∞ —É–ª–∏—Ü–µ –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ.", temp_str)
            } else {
                format!("üß∂ –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. {}¬∞C. –ü–æ–¥–æ–π–¥–µ—Ç –ª–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ –ø–ª–æ—Ç–Ω–∞—è –∫–æ—Ñ—Ç–∞, –¥–∂–∏–Ω—Å—ã –∏–ª–∏ –±—Ä—é–∫–∏. –ü—Ä–∏ —Å–∏–ª—å–Ω–æ–º –≤–µ—Ç—Ä–µ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —à–∞—Ä—Ñ. –£—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ—Ö–ª–∞–¥–Ω–µ–µ - –≤–æ–∑—å–º–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π –æ–¥–µ–∂–¥—ã.", temp_str)
            }
        } else if temp < 15.0 {
            if weather_main == "Rain" || weather_main == "Drizzle" {
                "‚òî –£–º–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ –∏ –¥–æ–∂–¥–ª–∏–≤–æ. –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç –∏ –Ω–∞–¥–µ–Ω—å—Ç–µ –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ –ø–ª–∞—â. –•–æ—Ä–æ—à–∏–º —Ä–µ—à–µ–Ω–∏–µ–º –±—É–¥–µ—Ç –ª–µ–≥–∫–∏–π —Å–≤–∏—Ç–µ—Ä –∏–ª–∏ –∫–æ—Ñ—Ç–∞ –∏ —É–¥–æ–±–Ω–∞—è –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –æ–±—É–≤—å.".to_string()
            } else {
                "üëï –£–º–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–µ–≥–∫–æ–π –∫—É—Ä—Ç–∫–∏ –∏–ª–∏ –∫–æ—Ñ—Ç—ã, –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å –¥–∂–∏–Ω—Å—ã –∏–ª–∏ –±—Ä—é–∫–∏. –ï—Å–ª–∏ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤–µ—Å—å –¥–µ–Ω—å –Ω–∞ —É–ª–∏—Ü–µ, –≤–æ–∑—å–º–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π –Ω–∞ –≤–µ—á–µ—Ä.".to_string()
            }
        } else if temp < 20.0 {
            if weather_main == "Rain" || weather_main == "Drizzle" {
                "üå¶Ô∏è –¢–µ–ø–ª–æ, –Ω–æ –¥–æ–∂–¥–ª–∏–≤–æ. –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç –∏ –ª–µ–≥–∫—É—é –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—É—é –∫—É—Ä—Ç–∫—É –∏–ª–∏ –¥–æ–∂–¥–µ–≤–∏–∫. –ü–æ–¥–æ–π–¥–µ—Ç —Ñ—É—Ç–±–æ–ª–∫–∞ –∏ –¥–∂–∏–Ω—Å—ã/–±—Ä—é–∫–∏. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —É–¥–æ–±–Ω—É—é –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º—É—é –æ–±—É–≤—å.".to_string()
            } else {
                "üëö –¢–µ–ø–ª–æ. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ—É—Ç–±–æ–ª–∫–∏, —Ä—É–±–∞—à–∫–∏ –∏–ª–∏ –±–ª—É–∑–∫–∏, –ø–æ–¥–æ–π–¥—É—Ç –ª–µ–≥–∫–∏–µ –±—Ä—é–∫–∏, –¥–∂–∏–Ω—Å—ã –∏–ª–∏ —é–±–∫–∞. –í–µ—á–µ—Ä–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–µ–µ, –≤–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –ª–µ–≥–∫—É—é –∫–æ—Ñ—Ç—É –∏–ª–∏ –∫–∞—Ä–¥–∏–≥–∞–Ω.".to_string()
            }
        } else if temp < 25.0 {
            if weather_main == "Rain" || weather_main == "Drizzle" {
                "üå§Ô∏è –î–æ–≤–æ–ª—å–Ω–æ —Ç–µ–ø–ª–æ, –Ω–æ –¥–æ–∂–¥–ª–∏–≤–æ. –õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞ (—Ñ—É—Ç–±–æ–ª–∫–∞, —à–æ—Ä—Ç—ã –∏–ª–∏ –ª–µ–≥–∫–∏–µ –±—Ä—é–∫–∏) –∏ –∑–æ–Ω—Ç. –î–æ–∂–¥–µ–≤–∏–∫ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –µ—Å–ª–∏ –¥–æ–∂–¥—å —Å–∏–ª—å–Ω—ã–π. –û–±—É–≤—å –ª—É—á—à–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–ø—Ä–æ–º–æ–∫–∞–µ–º—É—é.".to_string()
            } else {
                "üëó –î–æ–≤–æ–ª—å–Ω–æ —Ç–µ–ø–ª–æ. –õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞: —Ñ—É—Ç–±–æ–ª–∫–∞, —Ä—É–±–∞—à–∫–∞ –∏–ª–∏ –±–ª—É–∑–∫–∞, –ª–µ–≥–∫–∏–µ –±—Ä—é–∫–∏, —à–æ—Ä—Ç—ã –∏–ª–∏ —é–±–∫–∞. –í–µ—á–µ—Ä–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ö–ª–∞–¥–Ω–µ–µ, —Ç–∞–∫ —á—Ç–æ –∫–æ—Ñ—Ç–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç.".to_string()
            }
        } else if temp < 30.0 {
            if weather_main == "Rain" || weather_main == "Drizzle" {
                "üåû –ñ–∞—Ä–∫–æ, –Ω–æ —Å –¥–æ–∂–¥–µ–º. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏ –∑–æ–Ω—Ç–∏–∫. –ü–æ—Å–ª–µ –¥–æ–∂–¥—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–ª–∞–∂–Ω–æ –∏ –¥—É—à–Ω–æ - –≤—ã–±–∏—Ä–∞–π—Ç–µ –¥—ã—à–∞—â–∏–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Ç–∫–∞–Ω–∏.".to_string()
            } else {
                "‚òÄÔ∏è –ñ–∞—Ä–∫–æ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π: —Ñ—É—Ç–±–æ–ª–∫–∞, —à–æ—Ä—Ç—ã, —Å–∞—Ä–∞—Ñ–∞–Ω –∏–ª–∏ –ª–µ–≥–∫–æ–µ –ø–ª–∞—Ç—å–µ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º. –ë–µ—Ä–µ–≥–∏—Ç–µ—Å—å –ø—Ä—è–º—ã—Ö —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ª—É—á–µ–π.".to_string()
            }
        } else {
            if weather_main == "Rain" || weather_main == "Drizzle" {
                "üî• –û—á–µ–Ω—å –∂–∞—Ä–∫–æ, –≤–æ–∑–º–æ–∂–Ω—ã –¥–æ–∂–¥–∏. –ú–∏–Ω–∏–º—É–º —Å–∞–º–æ–π –ª–µ–≥–∫–æ–π –æ–¥–µ–∂–¥—ã –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π. –ù–æ—Å–∏—Ç–µ —Å–≤–µ—Ç–ª—ã–µ —Ü–≤–µ—Ç–∞. –ó–æ–Ω—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –∫–∞–∫ –¥–ª—è –¥–æ–∂–¥—è, —Ç–∞–∫ –∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–æ–ª–Ω—Ü–∞.".to_string()
            } else {
                "üî• –û—á–µ–Ω—å –∂–∞—Ä–∫–æ! –ù–æ—Å–∏—Ç–µ –º–∏–Ω–∏–º—É–º —Å–∞–º–æ–π –ª–µ–≥–∫–æ–π –æ–¥–µ–∂–¥—ã –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π, –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ —Å–≤–µ—Ç–ª—ã—Ö —Ü–≤–µ—Ç–æ–≤. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏ —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º. –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã –∏ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–µ–Ω–∏. –ò–∑–±–µ–≥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º —Å–æ–ª–Ω—Ü–µ –≤ –ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã.".to_string()
            }
        }
    }
    
    fn capitalize_first_letter(&self, s: &str) -> String {
        let mut chars = s.chars();
        match chars.next() {
            None => String::new(),
            Some(first) => first.to_uppercase().chain(chars).collect(),
        }
    }

    fn format_weekly_forecast(&self, forecast: &ForecastResponse) -> String {
        if forecast.list.is_empty() {
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥–Ω–æ–∑–µ".to_string();
        }

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º
        let mut days_forecast: HashMap<String, (String, Vec<&ForecastItem>)> = HashMap::new();
        
        for item in &forecast.list {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–∑ dt_txt: "2023-11-21 15:00:00"
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤)
            let date_str = if item.dt_txt.len() >= 10 {
                item.dt_txt[0..10].to_string()
            } else {
                // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ dt_txt –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                let date = Utc.timestamp_opt(item.dt, 0).unwrap();
                date.format("%Y-%m-%d").to_string()
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            let date = Utc.timestamp_opt(item.dt, 0).unwrap();
            let day_name = match date.weekday() {
                chrono::Weekday::Mon => "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                chrono::Weekday::Tue => "–í—Ç–æ—Ä–Ω–∏–∫",
                chrono::Weekday::Wed => "–°—Ä–µ–¥–∞",
                chrono::Weekday::Thu => "–ß–µ—Ç–≤–µ—Ä–≥",
                chrono::Weekday::Fri => "–ü—è—Ç–Ω–∏—Ü–∞",
                chrono::Weekday::Sat => "–°—É–±–±–æ—Ç–∞",
                chrono::Weekday::Sun => "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
            days_forecast.entry(date_str)
                .or_insert_with(|| (day_name.to_string(), Vec::new()))
                .1.push(item);
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        let mut result = String::new();
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏
        let mut days: Vec<(String, (String, Vec<&ForecastItem>))> = days_forecast.into_iter().collect();
        days.sort_by(|a, b| a.0.cmp(&b.0));
        
        for (date, (day_name, forecasts)) in days {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–Ω—è
            let mut min_temp = f32::MAX;
            let mut max_temp = f32::MIN;
            let mut avg_feels_like = 0.0;
            let mut avg_humidity = 0.0;
            let mut avg_wind_speed = 0.0;
            let mut avg_wind_deg = 0.0;
            let mut avg_clouds = 0;
            let mut main_weather_type = String::new();
            let mut main_weather_icon = String::new();
            let mut descriptions = Vec::new();
            let mut count = 0;
            
            // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
            for item in &forecasts {
                min_temp = min_temp.min(item.main.temp_min);
                max_temp = max_temp.max(item.main.temp_max);
                avg_feels_like += item.main.feels_like;
                avg_humidity += item.main.humidity;
                
                if let Some(weather_info) = item.weather.first() {
                    descriptions.push(self.capitalize_first_letter(&weather_info.description));
                    
                    // –ë–µ—Ä–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â—É—é –ø–æ–≥–æ–¥—É –∑–∞ –¥–µ–Ω—å (—Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ –¥–Ω—è)
                    let time = Utc.timestamp_opt(item.dt, 0).unwrap();
                    let hour = time.hour();
                    if (12..15).contains(&hour) {
                        main_weather_type = weather_info.main.clone();
                        main_weather_icon = weather_info.icon.clone();
                    }
                }
                
                count += 1;
            }
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ—Ä–µ–¥–∏–Ω—É –¥–Ω—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
            if main_weather_icon.is_empty() && !forecasts.is_empty() {
                if let Some(weather_info) = forecasts[0].weather.first() {
                    main_weather_type = weather_info.main.clone();
                    main_weather_icon = weather_info.icon.clone();
                }
            }
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if count > 0 {
                avg_feels_like /= count as f32;
                avg_humidity /= count as f32;
                avg_wind_speed /= count as f32;
                avg_wind_deg /= count as f32;
                avg_clouds /= count;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
            let weather_emoji = self.get_weather_emoji(&main_weather_icon);
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ
            let clothing_recommendation = self.get_clothing_recommendation(max_temp, &main_weather_type);
            
            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
            descriptions.sort();
            descriptions.dedup();
            
            // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ç—Ä–∞
            let wind_direction = self.get_wind_direction(avg_wind_deg);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –¥–Ω—è - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ –¥–µ–Ω—å.–º–µ—Å—è—Ü
            let date_parts: Vec<&str> = date.split('-').collect();
            let formatted_date = if date_parts.len() >= 3 {
                format!("{}.{}", date_parts[2], date_parts[1]) // –¥–µ–Ω—å.–º–µ—Å—è—Ü
            } else {
                date.clone() // –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –±–µ—Ä–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
            };
            
            // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ MarkdownV2
            let avg_temp = format!("{:.1}", (min_temp + max_temp) / 2.0).replace(".", "\\.");
            let feels_like = format!("{:.1}", avg_feels_like).replace(".", "\\.");
            let min_temp_fmt = format!("{:.1}", min_temp).replace(".", "\\.");
            let max_temp_fmt = format!("{:.1}", max_temp).replace(".", "\\.");
            let humidity = format!("{:.0}", avg_humidity);
            let wind_speed = format!("{:.1}", avg_wind_speed).replace(".", "\\.");
            
            // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º –∫–∞–∫ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ, –Ω–æ –±–µ–∑ –≤—Ä–µ–º–µ–Ω –≤–æ—Å—Ö–æ–¥–∞/–∑–∞–∫–∞—Ç–∞
            result.push_str(&format!("{} {}, {}\n\n", 
                weather_emoji,
                day_name, 
                formatted_date.replace(".", "\\.")
            ));
            
            result.push_str(&format!("üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {}¬∞C)\n", 
                avg_temp,
                feels_like
            ));
            
            result.push_str(&format!("üî∏ –ú–∏–Ω: {}¬∞C, –ú–∞–∫—Å: {}¬∞C\n", min_temp_fmt, max_temp_fmt));
            result.push_str(&format!("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {}%\n", humidity));
            result.push_str(&format!("üçÉ –í–µ—Ç–µ—Ä: {} –º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {}\n", wind_speed, wind_direction));
            result.push_str(&format!("‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {}%\n", avg_clouds));
            result.push_str(&format!("üå§ –ü–æ–≥–æ–¥–∞: {}\n", descriptions.join(", ")));
            result.push_str(&format!("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {}\n\n", clothing_recommendation));
        }
        
        result
    }
}