use crate::storage::{JsonStorage, UserSettings};
use dotenv::dotenv;
use std::sync::Arc;
use teloxide::prelude::*;
use log::{info, error};
use teloxide::utils::command::BotCommands;

mod weather;
mod storage;
mod scheduler;

#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
enum Command {
    #[command(description = "–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")]
    Start,
    #[command(description = "–ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")]
    Help,
    #[command(description = "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /city –ú–æ—Å–∫–≤–∞)")]
    City(String),
    #[command(description = "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, /time 08:00)")]
    Time(String),
    #[command(description = "—É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É")]
    Weather,
    #[command(description = "–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é")]
    Forecast,
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
fn escape_markdown_v2(text: &str) -> String {
    let special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!'];
    let mut result = String::with_capacity(text.len() * 2); // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    
    for ch in text.chars() {
        if special_chars.contains(&ch) {
            result.push('\\');
        }
        result.push(ch);
    }
    
    result
}

#[tokio::main]
async fn main() {
    dotenv().ok();
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ info, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
    if std::env::var("RUST_LOG").is_err() {
        std::env::set_var("RUST_LOG", "info");
    }
    pretty_env_logger::init();
    info!("–ó–∞–ø—É—Å–∫ FerrisBot...");

    let bot_token = std::env::var("TELEGRAM_BOT_TOKEN").expect("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ");
    let weather_api_key = std::env::var("OPENWEATHER_API_KEY").expect("OPENWEATHER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ");

    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π Arc
    let storage = Arc::new(JsonStorage::new("users.json").await);

    // –°–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á
    let storage_for_handler = Arc::clone(&storage); 
    let storage_for_scheduler = Arc::clone(&storage);

    let bot = Bot::new(bot_token);
    
    // –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å getUpdates
    if let Err(e) = bot.delete_webhook().await {
        error!("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {}", e);
    } else {
        info!("Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
    }
    
    let weather_client = weather::WeatherClient::new(weather_api_key.clone());
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    info!("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –∫–æ–º–∞–Ω–¥–Ω—É—é –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞...");

    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤—Ä—É—á–Ω—É—é –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    use teloxide::types::BotCommand;

    let commands = vec![
        BotCommand::new("start", "–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand::new("help", "–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand::new("city", "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /city –ú–æ—Å–∫–≤–∞)"),
        BotCommand::new("time", "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, /time 08:00)"),
        BotCommand::new("weather", "—É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É"),
        BotCommand::new("forecast", "–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"),
    ];
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    match bot.set_my_commands(commands).await {
        Ok(_) => info!("–ö–æ–º–∞–Ω–¥–Ω–∞—è –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"),
        Err(e) => error!("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {}", e),
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
    let command_handler = Update::filter_message()
        .branch(
            dptree::entry()
                .filter_command::<Command>()
                .endpoint(handle_commands),
        )
        .branch(dptree::endpoint(handle_message));

    // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    let scheduler_task = scheduler::start_scheduler(
        bot.clone(),
        storage_for_scheduler,
        weather_client.clone()
    );
    info!("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω");

    // –£–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    let handler = dptree::deps![bot.clone(), storage_for_handler, weather_client];

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    let mut dispatcher = teloxide::dispatching::Dispatcher::builder(bot, command_handler)
        .dependencies(handler)
        .enable_ctrlc_handler()
        .build();
        
    let bot_task = dispatcher.dispatch();

    info!("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
    tokio::select! {
        _ = bot_task => {
            info!("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }
        _ = scheduler_task => {
            error!("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ");
        }
    }
}

async fn handle_commands(
    bot: Bot,
    msg: Message,
    cmd: Command,
    storage: Arc<JsonStorage>,
    weather_client: weather::WeatherClient,
) -> ResponseResult<()> {
    let user_id = msg.chat.id.0;
    let username = msg.from()
        .and_then(|user| user.username.clone())
        .unwrap_or_else(|| format!("ID: {}", user_id));
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    match &cmd {
        Command::Start => info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", username),
        Command::Help => info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å", username),
        Command::City(city) => info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥: {}", username, city),
        Command::Time(time) => info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {}", username, time),
        Command::Weather => info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É", username),
        Command::Forecast => info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é", username),
    }
    
    match cmd {
        Command::Start => {
            send_start_message(&bot, &msg).await?;
        }
        Command::Help => {
            send_help(&bot, &msg).await?;
        }
        Command::City(city) => {
            set_city(&bot, &msg, &storage, &city).await?;
        }
        Command::Time(time) => {
            set_time(&bot, &msg, &storage, &time).await?;
        }
        Command::Weather => {
            send_current_weather(&bot, &msg, &storage, &weather_client).await?;
        }
        Command::Forecast => {
            send_weekly_forecast(&bot, &msg, &storage, &weather_client).await?;
        }
    }
    Ok(())
}

async fn handle_message(bot: Bot, msg: Message, storage: Arc<JsonStorage>) -> ResponseResult<()> {
    if let Some(text) = msg.text() {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        let user_id = msg.chat.id.0;
        let username = msg.from()
            .and_then(|user| user.username.clone())
            .unwrap_or_else(|| format!("ID: {}", user_id));
        
        info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {}", username, text);
        
        // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ "–º–∏–ª–æ–≥–æ —Ä–µ–∂–∏–º–∞"
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–æ–±—ã—á–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—É—é —Å–ª–æ–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ
        if text.trim() == "<3cute<3" {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let mut user = storage.get_user(user_id).await.unwrap_or_else(|| UserSettings {
                user_id,
                city: None,
                notification_time: None,
                cute_mode: false,
            });
            
            // –í–∫–ª—é—á–∞–µ–º –º–∏–ª—ã–π —Ä–µ–∂–∏–º
            user.cute_mode = true;
            storage.save_user(user).await;
            
            bot.send_message(
                msg.chat.id, 
                "üíï *–ú–∏–ª—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\\!*\n\n–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –º–∏–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è\\. –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç\\-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º\\!"
            )
            .parse_mode(teloxide::types::ParseMode::MarkdownV2)
            .await?;
            
            info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –º–∏–ª—ã–π —Ä–µ–∂–∏–º", username);
            return Ok(());
        }
        
        // –ö–æ–¥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è "–º–∏–ª–æ–≥–æ —Ä–µ–∂–∏–º–∞"
        if text.trim() == "/std" {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let mut user = storage.get_user(user_id).await.unwrap_or_else(|| UserSettings {
                user_id,
                city: None,
                notification_time: None,
                cute_mode: false,
            });
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –º–∏–ª—ã–π —Ä–µ–∂–∏–º, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∫–ª—é—á–µ–Ω
            if user.cute_mode {
                user.cute_mode = false;
                storage.save_user(user).await;
                
                bot.send_message(
                    msg.chat.id, 
                    "üîÑ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ."
                ).await?;
                
                info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º", username);
                return Ok(());
            }
        }
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(
            msg.chat.id, 
            "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\\."
        ).await?;
    }
    Ok(())
}

async fn send_start_message(bot: &Bot, msg: &Message) -> ResponseResult<()> {
    let standard_text = "üì± *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FerrisBot!*\n\n\
                –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç\\-–ø–æ–º–æ—â–Ω–∏–∫ —Å –ø–æ–≥–æ–¥–æ–π\\! \
                –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\\.\n\n\
                *–ß—Ç–æ —è —É–º–µ—é:*\n\
                ‚Ä¢ üå¶Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ\n\
                ‚Ä¢ üïí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n\
                ‚Ä¢ üîç –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n\
                *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\
                /city \\[–≥–æ—Ä–æ–¥\\] \\- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–≤–æ–π –≥–æ—Ä–æ–¥ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: /city –ú–æ—Å–∫–≤–∞\\)\n\
                /time \\[HH:MM\\] \\- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: /time 08:00\\)\n\
                /weather \\- –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n\
                /forecast \\- –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é\n\
                /help \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n\n\
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞ –∫–æ–º–∞–Ω–¥–æ–π /city";

    let cute_text = "üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FerrisBot\\!*\n\n\
                –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ç—Ä–µ–Ω–Ω–∏–π –±–æ—Ç\\-–±—É–¥–∏–ª—å–Ω–∏–∫ —Å –ø–æ–≥–æ–¥–æ–π –∏ –º–∏–ª—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\\! \
                –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∏ –ø–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\\.\n\n\
                *–ß—Ç–æ —è —É–º–µ—é:*\n\
                ‚Ä¢ üå¶Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ\n\
                ‚Ä¢ üíå –î–æ–±–∞–≤–ª—è—Ç—å –º–∏–ª—ã–µ –ø–æ—Å–ª–∞–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è\n\
                ‚Ä¢ üïí –í—ã–≤–æ–¥–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n\n\
                *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\
                /city \\[–≥–æ—Ä–æ–¥\\] \\- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–≤–æ–π –≥–æ—Ä–æ–¥ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: /city –ú–æ—Å–∫–≤–∞\\)\n\
                /time \\[HH:MM\\] \\- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: /time 08:00\\)\n\
                /weather \\- –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n\
                /forecast \\- –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é\n\
                /help \\- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n\n\
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞ –∫–æ–º–∞–Ω–¥–æ–π /city üíñ";

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –í –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–ª—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω
    bot.send_message(msg.chat.id, standard_text)
        .parse_mode(teloxide::types::ParseMode::MarkdownV2)
        .await?;
    Ok(())
}

async fn send_help(bot: &Bot, msg: &Message) -> ResponseResult<()> {
    let help_text = "üåü *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n\
                     /start \\- –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n\
                     /help \\- –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\
                     /city \\[–Ω–∞–∑–≤–∞–Ω–∏–µ\\] \\- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: /city –ú–æ—Å–∫–≤–∞\\)\n\
                     /time \\[–ß–ß:–ú–ú\\] \\- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: /time 08:00\\)\n\
                     /weather \\- —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n\
                     /forecast \\- –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é";

    bot.send_message(msg.chat.id, help_text)
        .parse_mode(teloxide::types::ParseMode::MarkdownV2)
        .await?;
    Ok(())
}

async fn set_city(bot: &Bot, msg: &Message, storage: &JsonStorage, city_arg: &str) -> ResponseResult<()> {
    let user_id = msg.chat.id.0;
    let username = msg.from()
        .and_then(|user| user.username.clone())
        .unwrap_or_else(|| format!("ID: {}", user_id));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≥–æ—Ä–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if city_arg.trim().is_empty() {
        info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –ø—ã—Ç–∞–ª—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –≥–æ—Ä–æ–¥", username);
        bot.send_message(
            msg.chat.id, 
            "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\\. –ù–∞–ø—Ä–∏–º–µ—Ä: /city –ú–æ—Å–∫–≤–∞"
        ).await?;
        return Ok(());
    }

    let mut user = storage.get_user(user_id).await.unwrap_or_else(|| UserSettings {
        user_id,
        city: None,
        notification_time: None,
        cute_mode: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    });

    user.city = Some(city_arg.trim().to_string());
    storage.save_user(user).await;
    
    info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–æ—Ä–æ–¥: {}", username, city_arg.trim());

    bot.send_message(
        msg.chat.id, 
        format!("üåÜ *–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:* {}\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n‚Ä¢ –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É —Å –ø–æ–º–æ—â—å—é /weather\n‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–º–∞–Ω–¥–æ–π /time \\[HH:MM\\]", escape_markdown_v2(city_arg.trim()))
    )
    .parse_mode(teloxide::types::ParseMode::MarkdownV2)
    .await?;
    
    Ok(())
}

async fn set_time(bot: &Bot, msg: &Message, storage: &JsonStorage, time_arg: &str) -> ResponseResult<()> {
    let user_id = msg.chat.id.0;
    let username = msg.from()
        .and_then(|user| user.username.clone())
        .unwrap_or_else(|| format!("ID: {}", user_id));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    if time_arg.trim().is_empty() {
        info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –ø—ã—Ç–∞–ª—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ –≤—Ä–µ–º—è", username);
        bot.send_message(
            msg.chat.id, 
            "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM\\. –ù–∞–ø—Ä–∏–º–µ—Ä: /time 08:00"
        ).await?;
        return Ok(());
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)
    if !is_valid_time_format(time_arg.trim()) {
        info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} —É–∫–∞–∑–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {}", username, time_arg);
        bot.send_message(
            msg.chat.id, 
            "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00"
        ).await?;
        return Ok(());
    }

    let mut user = storage.get_user(user_id).await.unwrap_or_else(|| UserSettings {
        user_id,
        city: None,
        notification_time: None,
        cute_mode: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    });

    user.notification_time = Some(time_arg.trim().to_string());
    storage.save_user(user).await;
    
    info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {}", username, time_arg.trim());

    bot.send_message(
        msg.chat.id, 
        format!("‚è∞ *–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:* {}\n\n–¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∏ –º–∏–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\\! üíñ", escape_markdown_v2(time_arg.trim()))
    )
    .parse_mode(teloxide::types::ParseMode::MarkdownV2)
    .await?;
    
    Ok(())
}

async fn send_current_weather(
    bot: &Bot, 
    msg: &Message, 
    storage: &JsonStorage, 
    weather_client: &weather::WeatherClient
) -> ResponseResult<()> {
    let user_id = msg.chat.id.0;
    let username = msg.from()
        .and_then(|user| user.username.clone())
        .unwrap_or_else(|| format!("ID: {}", user_id));
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = storage.get_user(user_id).await;
    
    match user {
        Some(user) => {
            match &user.city {
                Some(city) => {
                    bot.send_chat_action(msg.chat.id, teloxide::types::ChatAction::Typing).await?;
                    
                    info!("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{}, –≥–æ—Ä–æ–¥: {}", username, city);
                    
                    match weather_client.get_weather(city).await {
                        Ok(weather) => {
                            info!("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{}", username);
                            
                            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                            let message = if user.cute_mode {
                                // –ú–∏–ª—ã–π —Ä–µ–∂–∏–º
                                format!("üíñ *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è, –ø–æ–≥–æ–¥–∞ –≤ {}*\n\n{}", 
                                    escape_markdown_v2(city), 
                                    escape_markdown_v2(&weather))
                            } else {
                                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
                                format!("üå¶Ô∏è *–ü–æ–≥–æ–¥–∞ –≤ {}*\n\n{}", 
                                    escape_markdown_v2(city), 
                                    escape_markdown_v2(&weather))
                            };
                            
                            bot.send_message(msg.chat.id, message)
                                .parse_mode(teloxide::types::ParseMode::MarkdownV2)
                                .await?;
                        }
                        Err(e) => {
                            error!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{}: {}", username, e);
                            bot.send_message(
                                msg.chat.id, 
                                format!("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É:*\n{}\n\n–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ\\.", escape_markdown_v2(&e.to_string()))
                            )
                            .parse_mode(teloxide::types::ParseMode::MarkdownV2)
                            .await?;
                        }
                    }
                }
                None => {
                    info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞", username);
                    bot.send_message(
                        msg.chat.id, 
                        "‚ö†Ô∏è *–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /city \\[–≥–æ—Ä–æ–¥\\], —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\\."
                    )
                    .parse_mode(teloxide::types::ParseMode::MarkdownV2)
                    .await?;
                }
            }
        }
        None => {
            info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", username);
            bot.send_message(
                msg.chat.id, 
                "‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /city \\[–≥–æ—Ä–æ–¥\\]\\."
            )
            .parse_mode(teloxide::types::ParseMode::MarkdownV2)
            .await?;
        }
    }
    
    Ok(())
}

async fn send_weekly_forecast(
    bot: &Bot, 
    msg: &Message, 
    storage: &JsonStorage, 
    weather_client: &weather::WeatherClient
) -> ResponseResult<()> {
    let user_id = msg.chat.id.0;
    let username = msg.from()
        .and_then(|user| user.username.clone())
        .unwrap_or_else(|| format!("ID: {}", user_id));
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = storage.get_user(user_id).await;
    
    match user {
        Some(user) => {
            match &user.city {
                Some(city) => {
                    bot.send_chat_action(msg.chat.id, teloxide::types::ChatAction::Typing).await?;
                    
                    info!("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{}, –≥–æ—Ä–æ–¥: {}", username, city);
                    
                    match weather_client.get_weekly_forecast(city).await {
                        Ok(forecast) => {
                            info!("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{}", username);
                            
                            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
                            let city_escaped = escape_markdown_v2(city);
                            let forecast_escaped = escape_markdown_v2(&forecast);
                            
                            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
                            let message = if user.cute_mode {
                                // –ú–∏–ª—ã–π —Ä–µ–∂–∏–º
                                format!("‚ú® *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ {}*\n\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª(–∞) –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:\n\n{}", city_escaped, forecast_escaped)
                            } else {
                                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º
                                format!("üóì *–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ {}*\n\n{}", city_escaped, forecast_escaped)
                            };
                            
                            bot.send_message(msg.chat.id, message)
                                .parse_mode(teloxide::types::ParseMode::MarkdownV2)
                                .await?;
                        }
                        Err(e) => {
                            error!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{}: {}", username, e);
                            bot.send_message(
                                msg.chat.id, 
                                format!("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑:*\n{}\n\n–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ\\.", escape_markdown_v2(&e.to_string()))
                            )
                            .parse_mode(teloxide::types::ParseMode::MarkdownV2)
                            .await?;
                        }
                    }
                }
                None => {
                    info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞", username);
                    bot.send_message(
                        msg.chat.id, 
                        "‚ö†Ô∏è *–ì–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /city \\[–≥–æ—Ä–æ–¥\\], —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\\."
                    )
                    .parse_mode(teloxide::types::ParseMode::MarkdownV2)
                    .await?;
                }
            }
        }
        None => {
            info!("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", username);
            bot.send_message(
                msg.chat.id, 
                "‚ö†Ô∏è *–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /city \\[–≥–æ—Ä–æ–¥\\]\\."
            )
            .parse_mode(teloxide::types::ParseMode::MarkdownV2)
            .await?;
        }
    }
    
    Ok(())
}

fn is_valid_time_format(time: &str) -> bool {
    if let Some((hours_str, minutes_str)) = time.split_once(':') {
        if let (Ok(hours), Ok(minutes)) = (hours_str.parse::<u8>(), minutes_str.parse::<u8>()) {
            return hours < 24 && minutes < 60;
        }
    }
    false
}
