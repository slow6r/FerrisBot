use teloxide::types::ChatId;
use teloxide::Bot;
use super::storage::JsonStorage;
use super::weather::WeatherClient;
use chrono::{Local, Datelike, Weekday};
use tokio::time::{sleep, Duration};
use std::sync::Arc;
use teloxide::payloads::SendMessageSetters;
use teloxide::prelude::Requester;
use rand::Rng;
use log::{info, error, warn};

pub async fn start_scheduler(bot: Bot, storage: Arc<JsonStorage>, weather_client: WeatherClient) {
    loop {
        let now = Local::now();
        let now_time = now.format("%H:%M").to_string();
        let today = now.weekday();
        
        info!("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π [{}]", now_time);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        let users = storage.get_all_users().await;
        info!("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {}", users.len());

        for user in users {
            if let Some(scheduled_time) = &user.notification_time {
                if scheduled_time == &now_time {
                    if let Some(city) = &user.city {
                        info!("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {}, –≥–æ—Ä–æ–¥: {}", user.user_id, city);
                        
                        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É
                        match weather_client.get_weather(city).await {
                            Ok(weather_text) => {
                                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                let greeting = get_greeting(today);
                                let cute_message = get_cute_message();
                                let good_day_wish = get_good_day_wish();
                                
                                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                let message = format!("{}\n\nüå¶ *–ü–æ–≥–æ–¥–∞ –≤ {}*\n\n{}\n\n{}\n\n{}", 
                                    greeting, city, weather_text, cute_message, good_day_wish);
                                
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                if let Err(e) = bot.send_message(ChatId(user.user_id), message)
                                    .parse_mode(teloxide::types::ParseMode::Markdown)
                                    .await 
                                {
                                    error!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", user.user_id, e);
                                } else {
                                    info!("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {}", user.user_id);
                                }
                            }
                            Err(e) => {
                                warn!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.user_id, e);
                                
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                                if let Err(e) = bot.send_message(
                                    ChatId(user.user_id),
                                    format!("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: {}", e)
                                ).await {
                                    error!("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", user.user_id, e);
                                }
                            }
                        }
                    } else {
                        warn!("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥", user.user_id);
                    }
                }
            }
        }
        
        // –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        sleep(Duration::from_secs(60)).await;
    }
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏
fn get_greeting(day: Weekday) -> String {
    match day {
        Weekday::Mon => "*–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –º–∏–ª–∞—è!* ‚ú®\n–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –Ω–µ–¥–µ–ª—è, –∏ —è –∑–Ω–∞—é, —á—Ç–æ —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å–æ –≤—Å–µ–º!".to_string(),
        Weekday::Tue => "*–î–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ!* üå∏\n–£–∂–µ –≤—Ç–æ—Ä–Ω–∏–∫! –î–µ–Ω—å, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –≥–æ—Ä—ã —Å–≤–µ—Ä–Ω—É—Ç—å!".to_string(),
        Weekday::Wed => "*–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–æ–ª–Ω—ã—à–∫–æ!* üí´\n–°–µ—Ä–µ–¥–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏ - –≤—Ä–µ–º—è –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–∞–¥–æ—Å—Ç–µ–π!".to_string(),
        Weekday::Thu => "*–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫—Ä–∞—Å–æ—Ç–∫–∞!* üåø\n–ß–µ—Ç–≤–µ—Ä–≥ - –ø–æ—á—Ç–∏ –ø—è—Ç–Ω–∏—Ü–∞! –¢—ã –º–æ–ª–æ–¥–µ—Ü!".to_string(),
        Weekday::Fri => "*–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º!* üéâ\n–ü—è—Ç–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–∞! –í–ø–µ—Ä–µ–¥–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ!".to_string(),
        Weekday::Sat => "*–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!* ‚òÄÔ∏è\n–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Å—É–±–±–æ—Ç–∞! –í—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –∏ –ø—Ä–∏—è—Ç–Ω—ã—Ö –¥–µ–ª!".to_string(),
        Weekday::Sun => "*–î–æ–±—Ä–æ–µ —É—Ç—Ä–µ—á–∫–æ!* üå§Ô∏è\n–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–±–∞–ª–æ–≤–∞—Ç—å —Å–µ–±—è!".to_string(),
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
fn get_cute_message() -> String {
    let messages = [
        "–¢—ã —Å–∞–º–∞—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è! –ù–µ –∑–∞–±—ã–≤–∞–π —É–ª—ã–±–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è! üíï",
        "–¢–≤–æ—è —É–ª—ã–±–∫–∞ —Å–ø–æ—Å–æ–±–Ω–∞ –æ—Å–≤–µ—Ç–∏—Ç—å –¥–∞–∂–µ —Å–∞–º—ã–π –ø–∞—Å–º—É—Ä–Ω—ã–π –¥–µ–Ω—å! üíñ",
        "–ù–µ –ø–æ–∑–≤–æ–ª—è–π –Ω–∏–∫–æ–º—É –∏—Å–ø–æ—Ä—Ç–∏—Ç—å —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è! –¢—ã –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å —Ç–æ–ª—å–∫–æ —Å—á–∞—Å—Ç—å—è! ‚ú®",
        "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ! –Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è! üåü",
        "–ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–∞—è –∏ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è! üí´",
        "–î–∞–∂–µ –≤ —Å–∞–º—ã–π –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å –≤–∞–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –º–æ–º–µ–Ω—Ç—ã —Å—á–∞—Å—Ç—å—è! üå∏",
        "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –∏ –ø–æ–∑–∏—Ç–∏–≤ –∑–∞—Ä—è–∂–∞—é—Ç –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üíù",
        "–ù–∞–¥–µ—é—Å—å, —Å–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –∂–¥—É—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã! üéÅ",
        "–ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –º–Ω–æ–≥–æ —Ä–∞–¥–æ—Å—Ç–∏ –∏ —É—Å–ø–µ—Ö–æ–≤! üåà",
        "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å! –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π! ‚≠ê",
    ];
    
    let index = rand::thread_rng().gen_range(0..messages.len());
    messages[index].to_string()
}

// –ü–æ–∂–µ–ª–∞–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è
fn get_good_day_wish() -> String {
    let wishes = [
        "–ñ–µ–ª–∞—é —Ç–µ–±–µ —á—É–¥–µ—Å–Ω–æ–≥–æ –¥–Ω—è! üí´",
        "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è —Ç–µ–±—è –æ–∫—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ç–∏–≤! üåà",
        "–•–æ—Ä–æ—à–µ–≥–æ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è! ‚ú®",
        "–ñ–µ–ª–∞—é, —á—Ç–æ–±—ã —ç—Ç–æ—Ç –¥–µ–Ω—å –±—ã–ª –Ω–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏—è—Ç–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏! üíñ",
        "–ü—É—Å—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –±—É–¥–µ—Ç —Ç–∞–∫–∏–º –∂–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º, –∫–∞–∫ –∏ —Ç—ã! üå∏",
        "–í–µ—Ä—é, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üí™",
        "–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è –∏ –ª–µ–≥–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! üçÄ",
        "–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å —ç—Ç–æ–≥–æ –¥–Ω—è –ø–æ–¥–∞—Ä–∏—Ç —Ç–µ–±–µ —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ! ‚è∞",
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å! üåû",
        "–ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è –≤—Å—ë –∏–¥–µ—Ç –ø–æ —Ç–≤–æ–µ–º—É –ø–ª–∞–Ω—É! üìù"
    ];
    
    let index = rand::thread_rng().gen_range(0..wishes.len());
    wishes[index].to_string()
}